#!/usr/bin/env python
# -*- coding: utf-8 -*-
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    A copy of the GNU General Public License is available at
#    http://www.gnu.org/licenses/gpl-3.0.html


"""Extract EggNogg annotation."""


from __future__ import print_function
import argparse
import os
import sys
import csv
import re
import glob
import multiprocessing as mp
import textwrap
import bisect
import subprocess


__author__ = "Amine Ghozlane"
__copyright__ = "Copyright 2014, INRA"
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Amine Ghozlane"
__email__ = "amine.ghozlane@jouy.inra.fr"
__status__ = "Developpement"


class FullPaths(argparse.Action):
    """Expand user- and relative-paths"""
    def __call__(self, parser, namespace, values, option_string=None):
        # If false then its a list
        if not isinstance(values, basestring):
            out = []
            for val in values:
                if os.path.isfile(val):
                    out += [os.path.abspath(os.path.expanduser(val))]
                elif os.path.isdir(val):
                    out += [os.path.abspath(os.path.expanduser(val)) + os.sep]
                else:
                    out += [val]
            setattr(namespace, self.dest, out)
        # Value is a string
        else:
            if os.path.isfile(values):
                setattr(namespace, self.dest,
                        os.path.abspath(os.path.expanduser(values)))
            elif os.path.isdir(values):
                setattr(namespace, self.dest,
                        os.path.abspath(os.path.expanduser(values)) + os.sep)


def isfile(path):
    """Check if path is an existing file.
      :Parameters:
          path: Path to the file
    """
    if not os.path.isfile(path):
        if os.path.isdir(path):
            msg = "{0} is a directory".format(path)
        else:
            msg = "{0} does not exist.".format(path)
        raise argparse.ArgumentTypeError(msg)
    return path


def isdir(path):
    """Check if path is an existing file.
      :Parameters:
          path: Path to the file
    """
    if not os.path.isdir(path):
        if os.path.isfile(path):
            msg = "{0} is a file.".format(path)
        else:
            msg = "{0} does not exist.".format(path)
        raise argparse.ArgumentTypeError(msg)
    return path


def get_arguments():
    """Retrieves the arguments of the program.
      Returns: An object that contains the arguments
    """
    # Parsing arguments
    parser = argparse.ArgumentParser(description=__doc__, usage=
                                     "{0} -h (see also "
                                     "ftp://eggnog.embl.de/eggNOG/3.0/)"
                                     .format(sys.argv[0]))
    parser.add_argument('-q', dest='query_file', type=isfile, action=FullPaths,
                        help="Query file")
    parser.add_argument('-d', dest='database_file', type=isfile,
                        action=FullPaths, help="Database file")
    parser.add_argument('-e', dest='evalue', type=float,
                        help='E-value threshold for blast')
    parser.add_argument('-b', dest='blast_result_file', type=isfile,
                        action=FullPaths, help='Blast result against eggnog '
                        ' sequence datablase (type outfmt 6 with blast+)')
    parser.add_argument('-s', dest='max_target_seqs', type=int, default=20,
                        help='Indicate max target identified for each hit '
                        'for blast (default 20).')
    parser.add_argument('-c', dest='clustalo_align', action='store_true',
                        default=False, help='Use clustalo to calculate '
                        'identity and coverage)')
    parser.add_argument('-cl', dest='coverage_limit', type=float, default=0.0,
                        help='Coverage percent threshold on the reference '
                        '(Require -be - default no filtering)')
    parser.add_argument('-nb', dest='nbest', type=int, default=0,
                        help='Number of best selected (default:None, '
                        'based on the best value : identity + coverage)')
    parser.add_argument('-m', dest='nog_members', type=isdir, required=True,
                        action=FullPaths,
                        help='Directory with all NOG members')
    parser.add_argument('-n', dest='nog_description', type=isdir,
                        required=True, action=FullPaths,
                        help='Directory with all NOG description')
    parser.add_argument('-a', dest='nog_funccat_desc', type=isfile,
                        required=True, action=FullPaths, 
                        help='Funccat description file '
                        '(eggnogv3.funccats.txt)')
    parser.add_argument('-f', dest='nog_funccat', type=isdir, action=FullPaths,
                        required=True, help='Directory with all NOG funccat')
    parser.add_argument('-t', dest='threads', type=int,
                        help='Number of threads')
    parser.add_argument('-p', dest='path_soft', type=isdir, default=None,
                         nargs="+", action=FullPaths, 
                         help='Path to blastp and clustalo program'
                         '(1-/path/blastp,  2-/path clustalo, otherwise'
                         ' put only blastp or clustalo path)')
    parser.add_argument('-o', dest='output_file', type=str,
                        action=FullPaths, help='Output file')
    parser.add_argument('-r', dest='results', type=isdir, action=FullPaths,
                        default=os.curdir + os.sep, help='Path to result '
                        'directory.')
    return parser.parse_args()


def getfiles(directory, type_file):
    """Get all files of one type in a given directory
    """
    return glob.glob('{0}{1}*.{2}.txt'.format(directory, os.sep, type_file))


def get_description(nog_description_files):
    """Get the annotation for a COG/NOG/KOG id
    """
    nog_desc = {}
    try:
        for nog_description_file in nog_description_files:
            with open(nog_description_file, "rt") as nog_description:
                nog_description_reader = csv.reader(nog_description,
                                                    delimiter='\t')
                # Pass header
                nog_description_reader.next()
                for line in nog_description_reader:
                    if len(line) == 2:
                        nog_desc[line[0]] = line[1]
                    else:
                        print("Strange, more than two lines :{0}{1}"
                              .format(os.linesep, line), file=sys.stderr)
                assert(len(nog_desc) > 0)
    except IOError:
        sys.exit("Error cannot open {0}".format(nog_description_file))
    except AssertionError:
        sys.exit("Error nothing read from {0}".format(nog_description_file))
    return nog_desc


def get_members(nog_members_files):
    """Get all the sequences id belonging to a COG/NOG/KOG id
    """
    nog_mem = {}
    try:
        for nog_members_file in nog_members_files:
            with open(nog_members_file, "rt") as nog_members:
                nog_members_reader = csv.reader(nog_members, delimiter='\t')
                # Pass header
                nog_members_reader.next()
                for line in nog_members_reader:
                    if len(line) == 4:
                        nog_mem[line[1]] = line[0]
                assert(len(nog_mem) > 0)
    except IOError:
        sys.exit("Error cannot open {0}".format(nog_members_file))
    except AssertionError:
        sys.exit("Error nothing read from {0}".format(nog_members_file))
    return nog_mem


def get_funccat_description(nog_funccat_desc_file):
    """Load Functionnal category description
    """
    nog_fun_desc = {}
    desc_regex = re.compile(r"\s+\[([A-Z])\]\s+(.+)")
    try:
        with open(nog_funccat_desc_file, "rt") as nog_funccat_desc:
            for line in nog_funccat_desc:
                desc_match = desc_regex.match(line)
                if desc_match:
                    nog_fun_desc[desc_match.group(1)] = desc_match.group(2)
            assert(len(nog_fun_desc) > 0)
    except IOError:
        sys.exit("Error cannot open {0}".format(nog_funccat_desc_file))
    except AssertionError:
        sys.exit("Error nothing read from {0}".format(nog_funccat_desc_file))
    return nog_fun_desc


def get_funccat(nog_funccat_files):
    """Get the funcid for each COG/NOG/KOG id
    """
    nog_func = {}
    try:
        for nog_funccat_file in nog_funccat_files:
            with open(nog_funccat_file, "rt") as nog_funccat:
                nog_funccat_reader = csv.reader(nog_funccat, delimiter='\t')
                # Pass header
                nog_funccat_reader.next()
                for line in nog_funccat_reader:
                    if len(line) == 2:
                        nog_func[line[0]] = line[1]
                assert(len(nog_func) > 0)
    except IOError:
        sys.exit("Error cannot open {0}".format(nog_funccat_file))
    except AssertionError:
        sys.exit("Error nothing read from {0}".format(nog_funccat_file))
    return nog_func


def get_blast_result(blast_result_file):
    """Parse and directly annotate the sequence
    """
    blast_dict = {}
    try:
        with open(blast_result_file, "rt") as blast_result:
            blast_result_reader = csv.reader(blast_result, delimiter='\t')
            for line in blast_result_reader:
                # Get target in database and evalue
                if line[0] in blast_dict:
                    blast_dict[line[0]].append([line[1], line[10]])
                else:
                    blast_dict[line[0]] = [[line[1], line[10]]]
            assert(len(blast_dict) > 0)
    except IOError:
        sys.exit("Error cannot open {0}".format(blast_result_file))
    except AssertionError:
        sys.exit("Error nothing read from {0}".format(blast_result_file))
    return blast_dict


def run_command(cmd):
    """Run command
      Arguments:
          cmd: Command to run
    """
    try:
        # execute the command line
        retcode = subprocess.call(cmd, shell=True)
        # Case of no return
        if retcode is None:
            sys.exit("Process was terminated")
    except OSError as error:
        sys.exit("Execution failed: {0}".format(error))
    except:
        sys.exit("There is something wrong with the command: {0}".format(cmd))


def get_sequence(sequence_file):
    """Extract title and sequence
    """
    title = ""
    result = {}
    try:
        with open(sequence_file, "rt") as sequence:
            for line in sequence:
                if line[0] != ">":
                    result[title] += (line[0:].strip().replace("\n", "")
                                      .replace("\r", "").replace("*",""))
                if line[0] == ">":
                    title = line[1:].strip().replace("\n", "").replace("\r", "")
                    result[title] = ""
            assert(len(result) > 0)
    except IOError:
        sys.exit("Error : cannot open {0}".format(sequence_file))
    except AssertionError:
        sys.exit("Error : nothing read from {0}".format(sequence_file))
    return result


def prepare_compair(results, sequence_data, ref_data, path_soft):
    """Everything is reversed....
    """
    list_cmd = []
    try:
        for seq in sequence_data:
            for ref in ref_data:
                # multifasta file
                multifasta_file = (results + "sequence_" + seq + "_" +
                               ref + ".fasta")
                with open(multifasta_file, "wt") as multifasta:
                    ref_seq = "{0}".format(os.linesep).join(
                        textwrap.wrap(ref_data[ref], 80))
                    target_seq = "{0}".format(os.linesep).join(
                        textwrap.wrap(sequence_data[seq], 80))
                    multifasta.write(">{1}{0}{2}{0}>{3}{0}{4}{0}"
                                 .format(os.linesep, ref, ref_seq,
                                         seq, target_seq))
                result_file = (results + "clustalo_sequence_" + seq + "_" +
                               ref + ".fasta")
                list_cmd += [[seq, ref, "{0}clustalo -i {1} -o {2} --auto "
                             "-t Protein --outfmt=fa".format(path_soft,
                                                             multifasta_file,
                                                             result_file),
                             multifasta_file, result_file]]
    except IOError:
        sys.exit("Error : cannot open {0}".format(multifasta_file))
    return list_cmd


def extract_data(alignment_file):
    """Extract clustalo alignment
    """
    regex_head = re.compile(r"^>(\S+)")
    regex_sequence = re.compile(r"^([\w-]+)")
    data_aln = {}
    keys = []
    try:
        with open(alignment_file) as align:
            for line in align:
                match_head = regex_head.match(line)
                match_sequence = regex_sequence.match(line)
                if match_head:
                    head = match_head.group(1)
                    data_aln[head] = ""
                    keys += [head]
                elif match_sequence:
                    data_aln[head] += match_sequence.group(1)
            assert(data_aln != {} and len(data_aln) == 2)
    except IOError:
        sys.exit("Error cannot open {0}".format(alignment_file))
    except AssertionError:
        sys.exit("Nothing extracted or illegal length (!=2 alignment) "
                 "from {0}".format(alignment_file))
    if len(data_aln[keys[0]]) != len(data_aln[keys[1]]):
        sys.exit("The length of the alignment are different :{3}"
                 "{0[0]}:{1} and {0[1]}:{2}".format(keys,
                                                    len(data_aln[keys[0]]),
                                                    len(data_aln[keys[1]]),
                                                    os.linesep))
    return data_aln


def get_element(input_list, name):
    """Search name in input list
      Arguments:
        input_list: List
        name: Search criteria
    """
    # Searching the node with its name
    i = bisect.bisect_left(input_list, name)
    # Object has been found
    if(i != len(input_list) and input_list[i] == name):
        return True
    return False


def estimate_parameters(seq_template, seq_aln):
    """ Compute identity, similarity and coverage
    """
    similar_aa = ['AG', 'AP', 'AS', 'AT', 'DE', 'DN', 'DQ', 'ED', 'EN', 'EQ',
                 'FW', 'FY', 'GA', 'GP', 'GS', 'GT', 'HK', 'HR', 'IL', 'IM',
                 'IV', 'KH', 'KR', 'LI', 'LM', 'LV', 'MI', 'ML', 'MV', 'ND',
                 'NE', 'NQ', 'PA', 'PG', 'PS', 'PT', 'QD', 'QE', 'QN', 'RH',
                 'RK', 'SA', 'SG', 'SP', 'ST', 'TA', 'TG', 'TP', 'TS', 'VI',
                 'VL', 'VM', 'WF', 'WY', 'YF', 'YW']
    aligned = 0.0
    id_aa = 0.0
    similar = 0.0
    seq_t = seq_template.replace("-", "")
    seq_a = seq_aln.replace("-", "")
    for i in xrange(len(seq_template)):
        if(seq_template[i] == "-" or seq_aln[i] == "-"):
            pass
        elif(seq_template[i] == seq_aln[i] and seq_template[i] is not "X"
             and seq_aln[i] != "X"):
            id_aa += 1.0
            aligned += 1.0
            similar += 1.0
        elif(get_element(similar_aa, seq_template[i] + seq_aln[i])):
            similar += 1.0
            aligned += 1.0
        elif(seq_template[i] != "X" and seq_aln[i] != "X"):
            aligned += 1.0
    # identity = 100.0*count/(float(len(aln1.translate(None,"-."))
    # +len(aln2.translate(None,"-.")))/2.0)
    similarity = 100.0 * similar / float(min(len(seq_t), len(seq_a)))
    identity = 100.0 * id_aa / float(min(len(seq_t), len(seq_a)))
    coverage = 100.0 * aligned / float(max(len(seq_t), len(seq_a)))
    return [round(identity, 3), round(similarity, 3), round(coverage, 3)]


def run_alignment(cmd):
    """Run command
      Arguments:
          cmd: Command to run
    """
    alignment = []
    # Run the alignment
    run_command(cmd[2])
    if os.path.exists(cmd[4]):
        data_alignment = extract_data(cmd[4])
        alignment = [cmd[0], cmd[1]] + estimate_parameters(
                                            data_alignment[cmd[1]],
                                            data_alignment[cmd[0]])
        remove_file(cmd[3:5])
    else:
        alignment = [cmd[0], cmd[1], "NA", "NA", "NA"]
    return alignment


def get_dict(list_sequence, dataset):
    """Create a dict in a special case...
    """
    subset_dict = {}
    for element in list_sequence:
        subset_dict[element] = dataset[element]
    return subset_dict


def remove_file(list_file):
    """Remove temporary files
    """
    try:
        for fic in list_file:
            if os.path.exists(fic):
                os.remove(fic)
    except OSError:
        sys.exit("The program has failed to remove "
                 "the file : {0}".format(fic))


def run_compair(list_cmd, threads):
    """Run multithread comparaison
    """
    # Start calculations
    pool = mp.Pool(processes=threads)
    async_result = pool.map_async(run_alignment, list_cmd)
    return async_result.get()


def select_homologue(blast_result, sequence_data, ref_data,
                     results, path_soft, threads):
    """Select the best homologue depending on the identity and coverage
    """
    list_cmd = []
    result_alignment = {}
    # Fuckin slow !
    for seq in blast_result:
        seq_dict = {}
        seq_dict[seq] = sequence_data[seq]
        ref_dict = get_dict([e[0] for e in blast_result[seq]], ref_data)
        list_cmd += prepare_compair(results, seq_dict, ref_dict, path_soft)
        del(seq_dict)
        del(ref_dict)
    # Compute alignment
    list_alignment = run_compair(list_cmd, threads)
    for alignment in list_alignment:
        result_alignment[tuple(alignment[0:2])] = alignment[2:]
    del(list_alignment)
    return result_alignment


def set_annotation(blast_dict, nog_desc, nog_mem, nog_funccat,
                   nog_funccat_desc):
    """Get annotation
    """
    annotation_result = {}
    try:
        for seq in blast_dict:
            annotation_result[seq] = []
            for ref, evalue in blast_dict[seq]:
                if ref in nog_mem:
                    cog_id = nog_mem[ref]
                    if cog_id in nog_funccat and cog_id in nog_desc:
                        annotation_result[seq] += [[ref, cog_id, 
                                               "{0}".format(", ".join(
                                               [nog_funccat_desc[ident]
                                               for ident in nog_funccat[cog_id]]
                                               )), nog_desc[cog_id], evalue]]
                    elif cog_id in nog_desc:
                        annotation_result[seq] += [[ref , cog_id, "NA",
                                                   nog_desc[cog_id], evalue]]
                    elif cog_id in nog_funccat:
                        annotation_result[seq] += [[ref, cog_id, 
                                            "{0}".format(", ".join(
                                            [nog_funccat_desc[ident]
                                            for ident in nog_funccat[cog_id]]
                                            )), "NA", evalue]]
                    else:
                        annotation_result[seq] += [[ref , cog_id, "NA", "NA",
                                                    evalue]]
                else:
                    annotation_result[seq] += [[ref, "NA", "NA", "NA", evalue]]
        assert(len(annotation_result) > 0)
    except AssertionError:
        sys.exit("No annotation found at all !")
    return annotation_result


def write_result(annotation_result, results, output_file):
    """Write the result table
    """
    if not output_file:
        output_file = results + os.sep + "egg_nog_annotation.txt"
    try:
        with open(output_file, "wt") as output:
            output_writer = csv.writer(output, delimiter='\t')
            output_writer.writerow(["SequenceName", "ReferenceGene",
                                    "COG/NOG/KOG", "Functional category",
                                    "Annotation", "evalue"])
            #output_writer.writerows(annotation_result)
            for seq in annotation_result:
                for ref_set in annotation_result[seq]:
                    data += [ref_set]
                # Might be useless
                # Sort depending on the evalue
                data.sort(key=lambda x: x[0][-1])
                if nbest > 0:
                    short_set = data[0: nbest]
                else:
                    short_set = data
                for line in short_set:
                    output_writer.writerow([seq] + line)
                del(data)
                data = []
    except IOError:
        sys.exit("Error cannot open {0}".format(output_file))


def write_result_check(annotation_result, result_alignment, coverage_limit,
                       nbest, results, output_file):
    """Write the result table with alignment data
    """
    data = []
    if not output_file:
        output_file = results + os.sep + "egg_nog_annotation.txt"
    try:
        with open(output_file, "wt") as output:
            output_writer = csv.writer(output, delimiter='\t')
            output_writer.writerow(["SequenceName", "ReferenceProtein",
                                    "COG/NOG/KOG", "Functional category",
                                    "Annotation", "evalue", "Identity",
                                    "Similarity", "Coverage"])
            #for annot in annotation_result:
            for seq in annotation_result:
                for ref_set in annotation_result[seq]:
                    ref = ref_set[0]
                    ali = result_alignment[tuple([seq, ref])]
                    if ali[2] >= coverage_limit:
                        data += [ref_set + ali]
                # Sort depending on the identity
                data.sort(key=lambda x: x[0][-3] + x[0][-1], reverse=True)
                if nbest > 0:
                    short_set = data[0: nbest]
                else:
                    short_set = data
                for line in short_set:
                    output_writer.writerow([seq] + line)
                del(data)
                data = []
    except IOError:
        sys.exit("Error cannot open {0}".format(output_file))


#==============================================================
# Main program
#==============================================================
def main():
    """
    Main program function
    """
    # Get arguments
    args = get_arguments()
    # Grab query sequence in the database
    if args.query_file:
        print("Load query")
        sequence_data = get_sequence(args.query_file)
    if args.database_file:
        print("Load database")
        ref_data = get_sequence(args.database_file)
    # Parse description
    print("Load description")
    nog_desc = get_description(getfiles(args.nog_description, "description"))
    # Parse members
    print("Load members")
    nog_mem = get_members(getfiles(args.nog_members, "members"))
    # Parse funccats description
    print("Load desc func")
    nog_funccat_desc = get_funccat_description(args.nog_funccat_desc)
    # Parse funccat
    print("Load func")
    nog_funccat = get_funccat(getfiles(args.nog_funccat, "funccat"))
    # Run blast
    if not args.path_soft:
        args.path_soft = ['']
    if not args.blast_result_file:
        args.blast_result_file = (args.results + os.sep +
                                  "blast_output_eggnog.txt")
        cmd = ("{0}blastp -query {1} -db {2} -evalue {3} -outfmt 6 "
               "-num_threads {4} -out {5} -max_target_seqs {6}").format(
                args.path_soft[0], args.query_file, args.database_file,
                args.evalue, args.threads, args.blast_result_file,
                args.max_target_seqs)
        run_command(cmd)
        # Remove blastp path for clustalo to be the first
        args.path_soft.pop(0)
    # Parse blast result
    print("Load blast")
    blast_dict = get_blast_result(args.blast_result_file)
    # Identify the most likely homologue
    print("Identify homologue")
    if args.query_file and args.database_file and args.clustalo_align:
        result_alignment = select_homologue(blast_dict, sequence_data,
                                            ref_data, args.results,
                                            args.path_soft[0], args.threads)
    # Set annotation
    print("Set annotation")
    annotation_result = set_annotation(blast_dict, nog_desc, nog_mem,
                                       nog_funccat, nog_funccat_desc)
    # Write result
    if result_alignment:
        write_result_check(annotation_result, result_alignment,
                           args.coverage_limit, args.nbest, args.results,
                           args.output_file)
    else:
        write_result(annotation_result, args.results, args.output_file)


if __name__ == '__main__':
    main()